# -*- coding: utf-8 -*-
"""
Created on Wed Sep 25 10:28:17 2019

@author: peachl

Python tools for reading SWAN outputs
"""


import pandas as pd
import numpy as np



def read_tbl_file(filepath):
    """Read SWAN table file
    

    Parameters
    ----------
    filepath : string
        Path to the SWAN.tbl file

    Returns
    -------
    data : DataFrame
        A pandas dataframe of the data

    """

    data = pd.read_fwf(filepath, header = 4)
    data = data.loc[2:]
    df = data['Hswell        TPsmoo'].str.split('       ', expand =True)
    data['Hswell'] = df[0]
    data['Tp_smoothed'] = df[1]
    data.drop(columns =['Hswell        TPsmoo'],inplace=True)
    sites = max(data.groupby(['%       Time']).cumcount()+1)
    data['site'] = 0
    for i in list(range(sites)):
        data.iloc[i::sites,-1] = i

    data.index = pd.to_datetime(data.iloc[:,0],format= "%Y%m%d.%H%M%S")
    cols = data.columns
    data.index.names = ['Date/Time']
    data[cols] = data[cols].apply(pd.to_numeric, errors='coerce')

    return data

def read_tbl_input(filepath):

    locs = pd.read_csv(filepath, sep = "$", header =None)
    return locs

def point_series(tbl_path, input_path):
    """Reads in the tbl output file and input table.txt file to generate a point series
    

    Parameters
    ----------
    tbl_path : string
        path to the tbl output file generated by SWAN
    input_path : string
        path the to the input.txt file parsed into into SWAN used to generate the tbl file.

    Returns
    -------
    data : DataFrame
        A DataFrame containing the table data and attaching the point information to it.

    """

    data = read_tbl_file(tbl_path)
    locations = read_tbl_input(input_path)


    no_sites = len(data.site.unique())
    if len(locations.columns) > 1:
        data['site_name'] = ""
        data['lon'] = ""
        data['lat'] = ""
        for i in range(no_sites):
            data.iloc[i::no_sites, -3] = str(locations[1].values[i])
            data.iloc[i::no_sites, -2] = locations[0][i].split(' ')[0]
            data.iloc[i::no_sites, -1] = locations[0][i].split(' ')[1]
    else:
        data['lon'] = ""
        data['lat'] = ""
        for i in range(no_sites):
            data.iloc[i::no_sites, -2] = locations[0][i].split(' ')[0]
            data.iloc[i::no_sites, -1] = locations[0][i].split(' ')[1]
    return data
